package Recursion_Backtracking;
import java.util.*;
public class graphsbasic {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("enter no.of nodes (n): ");
		int n = sc.nextInt();
		System.out.println("enter no.of edges (m): ");
		int m = sc.nextInt();
		List<edge> graph[] = new ArrayList[n];
		creategraph(graph, n, m, sc);
		boolean[] visited = new boolean[n];
		dfs(graph, 0, visited);
	} 
	static void creategraph(List<edge> g[], int n, int m, Scanner sc) {
		for(int i=0; i<n; i++) {
			g[i] = new ArrayList<>();
		}
		for(int i=0; i<m; i++) {
			int src = sc.nextInt();
			int des = sc.nextInt();
			g[src].add(new edge(src, des));
			g[des].add(new edge(des, src));
		}
	}
	static void dfs(List<edge> g[], int curr, boolean[] visited ) {
		System.out.print(curr);
		visited[curr] = true;
		for(int i=0; i<g[curr].size(); i++) {
			edge e = g[curr].get(i);
			if(!visited[e.des]) {
				dfs(g, e.des, visited);
			}
		}
	}
	static void bfs(List<edge> g[], int curr, boolean[] visited, Queue<Integer> q) {
		q.add(curr);
		visited[curr] = true;
		while(!q.isEmpty()) {
			curr = q.poll();
			System.out.println(curr);
			for(int i=0; i<g[curr].size(); i++){
				edge e = g[i].get(i);
				if(!visited[e.des]) {
					visited[e.des] = true;
					q.offer(e.des);
				}
			}
		}
	}
}
class edge{
	int src;
	int des;
	edge(int src, int des){
		this.src = src;
		this.des = des;
	}
}
