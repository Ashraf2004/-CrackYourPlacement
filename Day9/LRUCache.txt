class LRUCache {
    Node head = new Node(0,0);
    Node tail = new Node(0,0);
    int capacity;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        head.next = tail;
        tail.prev = head;
    }
    Map<Integer, Node> map = new HashMap<>();
    public int get(int key) {
        //if key present in map
        if(map.containsKey(key)){
            Node node = map.get(key);
            delete(node);
            insert(node);
            return node.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        //if capaticy is full
        Node newNode = new Node(key, value);
        if(map.containsKey(key)){
            delete(map.get(key));
        }
        if(map.size() == capacity){
            //remove least used one
            delete(tail.prev);
        }
        
        insert(newNode);
    }
    void delete(Node node){
    //remove from map
    map.remove(node.key);
    //remove from dll
    node.prev.next = node.next;
    node.next.prev= node.prev;
}
void insert(Node node){
    map.put(node.key, node);
    Node temp = head.next;
    head.next = node;
    node.prev = head;
    temp.prev = node;
    node.next = temp;

}
class Node{
    int key, value;
    Node next, prev;
    Node(int key, int value){
        this.key = key;
        this.value = value;
        next = null;
        prev = null;
    }
}
}



/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */