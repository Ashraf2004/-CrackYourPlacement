class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (word.charAt(0) == board[i][j] && solve(0, i, j, board, word, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    static boolean solve(int curr, int i, int j, char[][] board, String word, boolean[][] visited) {
        if (curr == word.length()) return true;
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(curr)) {
            return false;
        }

        visited[i][j] = true;

        // Explore all four directions
        boolean found = solve(curr + 1, i - 1, j, board, word, visited) || // up
                        solve(curr + 1, i + 1, j, board, word, visited) || // down
                        solve(curr + 1, i, j - 1, board, word, visited) || // left
                        solve(curr + 1, i, j + 1, board, word, visited);   // right

        visited[i][j] = false; // Backtrack

        return found;
    }
}
