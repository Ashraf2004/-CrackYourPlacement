/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(-1);
        l1 = reverse(l1);
        l2 = reverse(l2);,
        ListNode curr = head;
        int carry = 0;
        while(l1 != null || l2 != null || carry != 0){
            int a = (l1 != null) ? l1.val : 0;
            int b = (l2 != null) ? l2.val : 0;
            int sum = a+b+carry;
            carry = sum / 10;
            int digit = sum % 10;
            curr.next = new ListNode(digit);
            curr = curr.next;

            if(l1 != null ) l1 = l1.next;
            if(l2 != null ) l2 = l2.next;

        }
        head = reverse(head.next);
        return head;
    }
    static ListNode reverse(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;
        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
        return head;
    }
}